#include <iostream>
#include <string>
#include <fstream>
#include <map>
#include <iterator>
#include <vector>
#include <cstdlib>
#include <ctime>
#include "floor.h"
#include "cell.h"
#include "action.h"
#include "wall.h"
#include "pass.h"
#include "tile.h"
#include "player.h"
#include "potion.h"
#include "gold.h"
#include "RH.h"
#include "BA.h"
#include "BD.h"
#include "PH.h"
#include "WA.h"
#include "WD.h"
#include "normal.h"
#include "hhoard.h"
#include "mhoard.h"
#include "dhoard.h"
#include "small.h"
#include "info.h"

using namespace std;

int Floor::numfloor = 0;


typedef multimap<int,int>::iterator ITERATOR;

Floor::Floor(Action *a)
  :a{a},row{25},col{79},monsternum{20},potionnum{10},goldnum{10},pc{nullptr}{
    ++numfloor;
}



Floor::~Floor() {
    for(int i = 0; i < row; i++) {
        for(int j = 0; j < col; j++) {
            delete theGrid[i][j];
        }
    }
    for(auto mo:monsters) {
      delete mo;
    }
    monsters.clear();
}

int Floor::getfloor() {
    return numfloor;
}

void Floor::setfloor() {
  numfloor = 0;
}

void Floor::setpc(Player *player) {
    pc = player;
}

void Floor::addCell(int i,int j, string symbol) {

    if(symbol == "|") {
      theGrid[i][j] = new Wall("|",i,j,a);
    } else if(symbol == "-") {
      theGrid[i][j] = new Wall("-",i,j,a);
    } else if(symbol == " ") {
      theGrid[i][j] = new Wall(" ",i,j,a);
    } else if(symbol == ".") {
      theGrid[i][j] = new Tile(i,j,a);
    } else if(symbol == "+") {
      theGrid[i][j] = new Pass("+",i,j,a);
    } else if(symbol == "#") {
      theGrid[i][j] = new Pass("#",i,j,a);
    } else {
      theGrid[i][j] = new Tile(i,j,a);
      if(symbol == "@") {
        theGrid[i][j]->set(pc);
      }
      if(symbol == "\\") {
        theGrid[i][j]->setstair();
      }
      if(symbol == "H" || symbol == "W" || symbol == "E" || symbol == "O"
            || symbol == "M" || symbol == "D" || symbol == "L") {
        Enemy *p = nullptr;
	if(symbol == "H") {
	  p = new Human(a);
	} else if(symbol == "M") {
	  p = new Merchant(a);
	} else if(symbol == "E") {
	  p = new Elf(a);
	} else if(symbol == "O") {
	  p = new Orc(a);
	} else if(symbol == "W") {
	  p = new Dwarf(a);
	} else if(symbol == "D") {
	  p = new Dragon(a);
	  dragonpos.insert(pair<int,int>(i,j));
	} else if(symbol == "L") {
	  p = new Halfling(a);
	}
	monsters.emplace_back(p);
	theGrid[i][j]->set(p);
      }
      if(symbol == "0" || symbol == "1" || symbol == "2" || symbol == "3"
            || symbol == "4" || symbol == "5") {
        Potion *ptr = nullptr;
	if(symbol == "0") {
	  ptr = new RH(a);
	} else if(symbol == "1") {
	  ptr = new BA(a);
	} else if(symbol == "2") {
	  ptr = new BD(a);
	} else if(symbol == "3") {
	  ptr = new PH(a);
	} else if(symbol == "4") {
	  ptr = new WA(a);
	} else if(symbol == "5") {
	  ptr = new WD(a);
	}
        theGrid[i][j]->set(ptr);
      }
      if(symbol == "6" || symbol == "7" || symbol == "8" || symbol == "9") {
	Gold *ptr = nullptr;
	if(symbol == "6") {
	  ptr = new Normal(a);
	} else if(symbol == "7") {
	  ptr = new Small(a);
	} else if(symbol == "8") {
	  ptr = new Mhoard(a);
	} else if(symbol == "9") {
	  ptr = new Dhoard(a);
	  hoardpos.insert(pair<int,int>(i,j));
	}
        theGrid[i][j]->set(ptr);
      }
    }
}



void Floor::basic(const string file) {
    ifstream ss{file};
    string line = "";
    if(file != "cc3kfloorempty.txt") {
      for(int i = 0; i < (getfloor() - 1) * row; i++) {
	getline(ss,line);
      }
    }
      for(int i = 0; i < row; i++) {
        getline(ss,line);
        for(int j = 0; j < col; j++) {
            string symbol;
            symbol = line[j];
            addCell(i,j,symbol);
        }
      }
    for(int i = 0; i < row; i++) {
        for(int j = 0; j < col; j++) {
            addNei(i,j, theGrid[i][j]);
        }
    }
}

void Floor::adddragon() {
  ITERATOR pos;
  ITERATOR hpos;
  for(pos = dragonpos.begin(); pos != dragonpos.end(); pos++) {
    int hr = 0;
    int hc = 0;
    int r = pos->first;
    int c = pos->second;
    for(hpos = hoardpos.begin(); hpos != hoardpos.end(); hpos++) {
      int p = hpos->first;
      int q = hpos->second;
      if( ((p - r) * (p - r) + (q - c) * (q - c)) <= 2) {
	hr = p;
	hc = q;
      }
    }
    Observer * o1 = theGrid[hr][hc]->getback();
    Observer * o2 = theGrid[r][c]->getback();
    if( Dhoard * dm = dynamic_cast<Dhoard *>(o1)) {
      if( Dragon *mo = dynamic_cast<Dragon *>(o2)) {
	dm->adddragon(mo);
      }
    }
  }
}


void Floor::addNei(int r, int c, Cell *cell) {
    if(r >= 1) cell->attach(theGrid[r - 1][c]);
    if(r < row  - 1) cell->attach(theGrid[r + 1][c]);
    if(c >= 1) cell->attach(theGrid[r][c - 1]);
    if(c < col - 1) cell->attach(theGrid[r][c + 1]);
    if(r >= 1 && c >= 1) cell->attach(theGrid[r - 1][c - 1]);
    if(r < row - 1 && c >= 1) cell->attach(theGrid[r + 1][c - 1]);
    if(r >= 1 && c < col - 1) cell->attach(theGrid[r - 1][c + 1]);
    if(r < row - 1 && c < col - 1) cell->attach(theGrid[r + 1][c + 1]);
}

void Floor::setChamber() {
    for(int i = 3; i <= 6; i++) {
        for(int j = 3; j <= 28; j++) {
	  chambers[0].insert(pair<int,int>(i,j));
        }
    }
    for(int i = 15; i <= 21; i++) {
        for(int j = 4; j <= 24; j++) {
             chambers[1].insert(pair<int,int>(i,j));
        }
    }
    for(int i = 3; i <= 12; i++) {
        if(i == 3 || i == 4) {
            for(int j = 39; j <= 61; j++) {
                 chambers[2].insert(pair<int,int>(i,j));
            }
        }
        if(i == 5) {
            for(int j = 39; j <= 69; j++) {
                 chambers[2].insert(pair<int,int>(i,j));
            }
        }
        if(i == 6) {
            for(int j = 39; j <= 72; j++) {
                 chambers[2].insert(pair<int,int>(i,j));
            }
        }
        if(i >= 7) {
            for(int j = 61; j <= 75; j++) {
                chambers[2].insert(pair<int,int>(i,j));
            }
        }
    }
    for(int i = 16; i <= 21; ++i) {
        if(i >= 16 && i <= 18) {
            for(int j = 65; j <= 75; j++) {
                chambers[3].insert(pair<int,int>(i,j));
            }
        } else {
            for(int j = 37; j <= 75; j++) {
                chambers[3].insert(pair<int,int>(i,j));
            }
        }
    }
    for(int i = 10; i <= 12; i++) {
        for(int j = 38; j <= 49; j++) {
           chambers[4].insert(pair<int,int>(i,j));
        }
    }
}

void Floor::placepc() {
    ITERATOR pos;
    int numcham = rand()%5;
    int size = chambers[numcham].size();
    int num = rand()%size;
    for(pos = chambers[numcham].begin(); pos != chambers[numcham].end(); pos++) {
        if(num == 0) {
            pc->setpos(pos->first, pos->second);
            theGrid[pos->first][pos->second]->set(pc);
        }
        num--;
    }
    placestair(numcham);
}

void Floor::placestair(int playcham) {
    ITERATOR pos;
    int numcham = rand()%5;
    while(numcham == playcham) {
        numcham = rand()%5;
    }
    int size = chambers[numcham].size();
    int r = 0;
    int c = 0;
    int num = rand()%size;
    for(pos = chambers[numcham].begin(); pos != chambers[numcham].end(); pos++) {
      if(num == 0) {
	r = pos ->first;
	c = pos->second;
      }
      num--;
    }
    theGrid[r][c]->setstair();
    stair.first = r;
    stair.second = c;
}


void Floor::findrc(int &r, int &c, int numcham) {
    ITERATOR pos;
    int size = chambers[numcham].size();
    int num = rand()%size;
    for(pos = chambers[numcham].begin(); pos != chambers[numcham].end(); pos++) {
        if(num == 0) {
            r = pos->first;
            c = pos->second;
        }
        num--;
    }
}



void Floor::placepotion() {
    ITERATOR pos;
    int r = 0;
    int c = 0;
    for(int i = 0; i < potionnum; i++) {
        int numcham = rand()%5;
        do {
           findrc(r,c, numcham);
        } while(theGrid[r][c]->have());
        Potion* p = nullptr;
        int type = rand()%6;
        switch(type) {
	case 0: p = new RH(a); break;
	case 1: p = new BA(a); break;
	case 2: p = new BD(a); break;
	case 3: p = new PH(a); break;
	case 4: p = new WA(a); break;
	case 5: p = new WD(a); break;
        }
        theGrid[r][c]->set(p);
    }
}

void Floor::placegold() {
    ITERATOR pos;
    int r = 0;
    int c = 0;
    for(int i = 0; i < goldnum; i++) {
        int numcham = rand()%5;
        do{
            findrc(r,c,numcham);
        } while(theGrid[r][c]->have());
        Gold* g = nullptr;
        int type = rand()%8;
        if(type >=0 && type <= 4) {
	  g = new Normal(a);
        }
        if(type >=5 && type <= 6) {
	  g = new Small(a);
        }
        if(type == 7) {
	  Dragon *p = new Dragon(a);
	  g = new Dhoard(a,p);
        }
        theGrid[r][c]->set(g);
    }
}

void Floor::placedragon(int oldr, int oldc) {
   ITERATOR pos;
   int newr = oldr;
   int newc = oldc;
   do{
     do{
       newr = oldr + (rand()%3 - 1);
       newc = oldc + (rand()%3 - 1);
     } while(!((newr == oldr) && (newc == oldc)));
     if(!validrc(newr,newc)) continue;
     if(theGrid[newr][newc]->monstermoveable()) break;
   } while(true);
   Enemy *e = new Dragon(a);
   theGrid[newr][newc]->set(e);
   monsters.emplace_back(e);
 }



void Floor::placeenemy() {
    ITERATOR pos;
    int r = 0;
    int c = 0;
    for(int i = 0; i < monsternum; i++) {
        int numcham = rand()%5;
        do{
            findrc(r,c,numcham);
        } while(theGrid[r][c]->have());
        Enemy *e = nullptr;
        int type = rand()%18;
        if(type >=0 && type <= 3) {
	  e = new Human(a);
        }
        if(type >=4 && type <= 6) {
	  e = new Dwarf(a);
        }
        if(type >= 7 && type <= 11) {
	  e = new Halfling(a);
        }
        if(type >= 12 && type <= 13) {
	  e = new Elf(a);
        }
        if(type >= 14 && type <= 15) {
	  e = new Orc(a);
        }
        if(type >= 16 && type <= 17) {
	  e = new Merchant(a);
        }
	cout << e->getrace() << endl;
	cout << "r " << r << endl;
	cout << "c " << c << endl;
        theGrid[r][c]->set(e);
        monsters.emplace_back(e);
    }
}

void Floor::init(const string file) {
  cout << "have read" << endl;
    if(file == "cc3kfloorempty.txt") {
      basic();
      setChamber();
      placepc();
      placepotion();
      placegold();
      placeenemy();
    } else {
        basic(file);
	setChamber();
    }
}


bool Floor::validrc(int r, int c) {
    if((r >= 0 && r <= row - 1) && (c >= 0 && c <= col - 1)) return true;
    return false;
}

bool Floor::ifchange(int newr, int newc, int oldr, int oldc) {
    if(!validrc(newr, newc)) return false;
    if(theGrid[newr][newc]->ifmoveable()) {
        pc->setpos(newr,newc);
        theGrid[newr][newc]->set(pc);
	theGrid[newr][newc]->leave();
        return true;
        } else {
            if(theGrid[newr][newc]->getsymbol() == "G") {
                pc->setpos(newr,newc);
		Observer * o1 = theGrid[newr][newc]->getback();
		if(Gold *g = dynamic_cast<Gold *>(o1)) {
                pc->pickgold(g->getvalue());
                theGrid[newr][newc]->erase();
                theGrid[newr][newc]->set(pc);
		theGrid[oldr][oldc]->leave();
		}
            }
    }
    return false;
}

void Floor::getnew(const string dir,int &newr, int &newc) {
    if(dir == "no") {
        newr -= 1;
    } else if(dir == "so") {
        newr += 1;
    } else if(dir == "ea") {
        newc += 1;
    } else if(dir == "we") {
        newc -= 1;
    } else if(dir == "ne") {
        newr -= 1;
        newc += 1;
    } else if(dir == "nw") {
        newr -= 1;
        newc -= 1;
    } else if(dir == "se") {
        newr += 1;
        newc += 1;
    } else if(dir == "sw") {
        newr += 1;
        newc -= 1;
    }
}




void Floor::Playerwalk(const string dir) {
    Info info = pc->getInfo();
    int r = info.row;
    int c = info.col;
    int newr = r;
    int newc = c;
    getnew(dir,newr,newc);
    bool t = ifchange(newr,newc,r,c);
    //  cout << "read bool " << endl;
    if(t) {
      //  cout << "true" << endl;
    } else {
      //  cout << "ff" << endl;
    }
    if(t) {
      // cout << "read bool " << endl;
        if(theGrid[newr][newc]->getsymbol() == "\\") {
            success = true;
        }
	theGrid[newr][newc]->set(pc);
	//          cout << "read 1  bool " << endl;
	theGrid[r][c]->leave();
	//         cout << "read 2 bool " << endl;
	theGrid[newr][newc]->notifyObservers(pc);
	//          cout << "read 3 bool " << endl;
        monsterswalk();
	//	          cout << "read 4 bool " << endl;
        if(dir == "no") {
	  a->notify("PC moves North.");
        } else if(dir == "so") {
	  a->notify("PC moves South.");
        } else if(dir == "ea") {
	  a->notify("PC moves East.");
        } else if(dir == "we") {
	  a->notify("PC moves West.");
        } else if(dir == "ne") {
	  a->notify("PC moves NorthEast.");
        } else if(dir == "nw") {
	  a->notify("PC moves NorthWest.");
        } else if(dir == "se") {
	  a->notify("PC moves SouthEast.");
        } else if(dir == "sw") {
	  a->notify("PC moves SouthWest.");
        }
    } else {
       monsterswalk();
    }
}

void Floor::monsterswalk()  {
  if(!stop) {
    for(auto mo: monsters) {
      cout << mo->getrace() << endl;
      if(!mo->ifturnover()) {
	if(mo->getrace() == "Dragon") {
	} else {
	  Info info = mo->getInfo();
	  int oldr = info.row;
	  int oldc = info.col;
	  cout << oldr << oldc << endl;
	  int newr = 0;
	  int newc = 0;
	  //	  cout << newr << endl;
	  do{
	    do{
	      newr = oldr + (rand()%3 - 1);
	      //  cout << newr << endl;
	      newc = oldc + (rand()%3 - 1);
	    } while((newr == oldr) && (newc == oldc));
	    if(!validrc(newr,newc)) continue;
	    if(theGrid[newr][newc]->monstermoveable()) break;   //mmmmm
	  } while(true);
	  cout << newr << endl;
	theGrid[oldr][oldc]->leave();
	theGrid[newr][newc]->set(mo);
	}
      } else {
	mo->changeturn();
      }
    }
  }
}





void Floor::usePotion(const string dir) {
    Info info = pc->getInfo();
    int r = info.row;
    int c = info.col;
    int newr = r;
    int newc = c;
    getnew(dir,newr,newc);
    if(theGrid[newr][newc]->getsymbol() == "P") {
      //  cout << "this is true " << endl;
      theGrid[newr][newc]->use(pc);
     // theGrid[newr][newc]->erase();
    }
    theGrid[newr][newc]->notifyObservers(pc);
    monsterswalk();
}



static bool ifmonster(const string symbol) {
  return  (symbol == "H" || symbol == "W" || symbol == "E" || symbol == "O"
	   || symbol == "M" || symbol == "D" || symbol == "L");
 }

void Floor::pcattack(const string dir) {
    Info info = pc->getInfo();
    int r = info.row;
    int c = info.col;
    int newr = r;
    int newc = c;
    getnew(dir,newr,newc);
    if(newr != r || newc != c) {
      if(ifmonster(theGrid[newr][newc]->getsymbol())) {
	Observer *o1 = theGrid[newr][newc]->getback();
	if(Enemy *e = dynamic_cast<Enemy *>(o1)) {
        cout << "pc want to attack" << endl;
	pc->attack(e);
	}
	theGrid[newr][newc]->use(pc);
      }
    }
    theGrid[newr][newc]->notifyObservers(pc);
    monsterswalk();
}

void Floor::stopmove() {
    if(!stop) stop = true;
    if(stop) stop = false;
}

bool Floor::getsuccess() {
    return success;
}

bool Floor::fail() {
  if(pc->ifdead()) {
    cout << "Game fail" << endl;
    return true;
  }
  return false;
}

ostream &operator<<(ostream &out, const Floor &f) {
    for(int i = 0; i < f.row; i++) {
        for(int j = 0; j < f.col; j++) {
	  out << f.theGrid[i][j]->getsymbol();
        }
        out << endl;
    }
    out << endl;
    out << "Race: " << f.pc->getrace() << " Gold: " << f.pc->getgold();
    out << "                              Floor " << Floor::numfloor << endl;
    out << "HP: " << f.pc->gethp() << endl;
    out << "Atk: " << f.pc->getatk() << endl;
    out << "Def: " << f.pc->getdef() << endl;
    out << "Action ";
    f.a->display();
    f.a->clear();
    out << endl;
    return out;
}


